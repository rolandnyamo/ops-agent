AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: App resources (Lambdas, API, roles, env)

Parameters:
  ProjectName: { Type: String, Default: ops-agent }
  Stage: { Type: String, Default: prod }
  BotApiSecret:
    Type: String
    Default: botsecret_e1b9c2a7c5f24ad6
    Description: Bot HMAC secret (text for build testing)
  EnableAuth:
    Type: String
    Default: 'true'
    AllowedValues: ['true','false']
    Description: Toggle API authorizers (set to 'false' for local SAM testing)
  VectorBucketName:
    Type: String
    Default: ops-embeddings
    Description: Name of the S3 Vectors bucket (created manually)
  RawBucketName:
    Type: String
    Default: ops-agent-prod-raw-326445141506-us-east-1
    Description: Name of the S3 Raw bucket (created manually)
  VectorIndexName:
    Type: String
    Default: docs
    Description: S3 Vectors index name

Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - arm64
    MemorySize: 512
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        COGNITO_USER_POOL_ID: !Ref UserPool
        COGNITO_USER_POOL_CLIENT_ID: !Ref UserPoolClient
        DOCS_TABLE: 'ops-agent-prod-docs'  # This will be overridden by the actual import value in the function definition
        SETTINGS_TABLE: 'ops-agent-prod-settings'  # This will be overridden by the actual import value in the function definition
        RAW_BUCKET: 'ops-agent-prod-raw-326445141506-us-east-1'  # This will be overridden by the actual import value in the function definition
        VECTOR_BUCKET: 'ops-embeddings'  # This will be overridden by the actual import value in the function definition
        VECTOR_INDEX: 'docs'  # This will be overridden by the actual import value in the function definition
        VECTOR_MODE: s3vectors
  HttpApi:
    Auth:
      Authorizers:
        AdminCognitoAuth:
          JwtConfiguration:
            issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
            audience:
              - !Ref UserPoolClient
          IdentitySource: "$request.header.Authorization"
        BotLambdaAuth:
          FunctionArn: !GetAtt BotAuthFn.Arn
          FunctionInvokeRole: !GetAtt BotAuthApiInvokeRole.Arn
          AuthorizerPayloadFormatVersion: 2.0
          EnableFunctionDefaultPermissions: true
          EnableSimpleResponses: true
          Identity:
            Headers:
              - X-Bot-API-Key
              - Authorization
        DefaultAuthorizer: BotLambdaAuth

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST', 'PUT', 'DELETE', 'OPTIONS']
        AllowHeaders: ['authorization','content-type','x-bot-signature','x-bot-timestamp','x-bot-api-key']
      # Auth:
      #   Authorizers:
      #     AdminCognitoAuth:
      #       JwtConfiguration:
      #         issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
      #         audience:
      #           - !Ref UserPoolClient
      #       IdentitySource: "$request.header.Authorization"
      #     BotLambdaAuth:
      #       FunctionArn: !GetAtt BotAuthFn.Arn
      #       FunctionInvokeRole: !GetAtt BotAuthApiInvokeRole.Arn
      #       AuthorizerPayloadFormatVersion: 2.0
      #       EnableFunctionDefaultPermissions: true
      #       EnableSimpleResponses: true
      #       Identity:
      #         Headers:
      #           - X-Bot-API-Key
      #           - Authorization
      #     DefaultAuthorizer: BotLambdaAuth
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectName}-${Stage}-admin"
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: admin-ui
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [openid, email, profile]
      CallbackURLs: ["http://localhost:3000"]
      LogoutURLs: ["http://localhost:3000"]
      SupportedIdentityProviders: [COGNITO]

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      Description: Administrators with full access to user management
      UserPoolId: !Ref UserPool
      Precedence: 10

  BotAuthFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-bot-auth"
      CodeUri: ../src
      Handler: handlers/auth/botAuth.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"

  BotAuthApiInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaAuthorizerInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  AskFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-ask"
      CodeUri: ../src
      Handler: handlers/ask.handler
      Events:
        PostQA:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /qa
            Method: POST
        PostAsk:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /ask
            Method: POST
            Auth:
              Authorizer: BotLambdaAuth
        OptionsAsk:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /ask
            Method: OPTIONS
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableArn' }
                - !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-SettingsTableArn' }
        - S3ReadPolicy:
            BucketName: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:*
                - s3vectors:*
              Resource:
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - s3vectors:*
              Resource:
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/openai/key"

  IngestionFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-ingestion"
      CodeUri: ../src
      Handler: handlers/docs.handler
      Events:
        PostIngest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/ingest
            Method: POST
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
        - S3WritePolicy:
            BucketName: "*"

  UploadUrlFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-upload-url"
      CodeUri: ../src
      Handler: handlers/uploadUrl.handler
      Events:
        PostUploadUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/upload-url
            Method: POST
      Environment:
        Variables:
          var1: value1
      Policies:
        - S3WritePolicy:
            BucketName: "*"

  IngestionWorkerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-ingest-worker"
      CodeUri: ../src
      Handler: handlers/ingestWorker.handler
      Timeout: 180
      MemorySize: 1024
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
        - S3ReadPolicy:
            BucketName: '*'
        - S3WritePolicy:
            BucketName: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
                - s3vectors:PutVectors
              Resource:
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/openai/key"

  S3PutRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-${Stage}-raw-objectcreated"
      EventPattern:
        source: ["aws.s3"]
        detail-type: ["Object Created"]
        detail:
          bucket:
            name: [ !Ref RawBucketName ]
          object:
            key:
              - prefix: "raw/"
      Targets:
        - Arn: !GetAtt IngestionWorkerFn.Arn
          Id: IngestionWorkerFnTarget

  IngestionWorkerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IngestionWorkerFn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3PutRule.Arn

  DocsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-docs"
      CodeUri: ../src
      Handler: handlers/docs.handler
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
        - S3CrudPolicy:
            BucketName: '*'
        - Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - s3vectors:DeleteVectors
              Resource:
                - "*"
      Events:
        ListDocs:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs
            Method: GET
            
        GetDoc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/{docId}
            Method: GET
            
        UpdateDoc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/{docId}
            Method: PUT
            
        DeleteDoc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/{docId}
            Method: DELETE

  ViewDocFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-view-doc"
      CodeUri: ../src
      Handler: handlers/viewDoc.handler
      Timeout: 30
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableArn' }
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListObjects
                - s3:ListObjectsV2
              Resource:
                - !Sub "arn:aws:s3:::${RawBucketName}/*"
      Events:
        ViewDoc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/view/{docId}
            Method: GET
            
  AgentsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-agents"
      CodeUri: ../src
      Handler: handlers/agents.handler
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/openai/key"
      Events:
        CreateAgent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents
            Method: POST
        ListAgents:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents
            Method: GET
        GetAgent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}
            Method: GET
        DeleteAgent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}
            Method: DELETE
            
  BotsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-bots"
      CodeUri: ../src
      Handler: handlers/bots.handler
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
      Events:
        CreateBot:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}/bots
            Method: POST
        ListBots:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}/bots
            Method: GET
        GetAllBots:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /bots
            Method: GET
        GetBot:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}/bots/{botId}
            Method: GET
        UpdateBot:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}/bots/{botId}
            Method: PUT
        DeleteBot:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /agents/{agentId}/bots/{botId}
            Method: DELETE
            
  InferFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-infer"
      CodeUri: ../src
      Handler: handlers/infer.handler
      Timeout: 20
      Environment:
        Variables:
           var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/openai/key"
      Events:
        PostInfer:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /infer
            Method: POST

  SettingsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-settings"
      CodeUri: ../src
      Handler: handlers/settings.handler
      Events:
        GetSettings:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /settings
            Method: GET
        PutSettings:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /settings
            Method: PUT
      Environment:
        Variables:
          var1: value1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-users"
      CodeUri: ../src
      Handler: handlers/users.handler
      Events:
        GetUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: GET
        GetUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}
            Method: GET
        InviteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/invite
            Method: POST
        ActivateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/activate
            Method: PUT
        DeactivateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/deactivate
            Method: PUT
        DeleteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}
            Method: DELETE
        OptionsUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: OPTIONS
        OptionsUsersPath:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}
            Method: OPTIONS
        OptionsUsersInvite:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/invite
            Method: OPTIONS
        OptionsUsersActivate:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/activate
            Method: OPTIONS
        OptionsUsersDeactivate:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/deactivate
            Method: OPTIONS
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref UserPool
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminEnableUser
                - cognito-idp:AdminDisableUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminListGroupsForUser
              Resource: !GetAtt UserPool.Arn

Outputs:
  ApiEndpoint:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient

