AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: App resources (Lambdas, API, roles, env)

Parameters:
  ProjectName: { Type: String, Default: ops-agent }
  Stage: { Type: String, Default: prod }
  OpenAIApiKey:
    Type: String
    Default: TEST_OPENAI_KEY_8e9a0a5f2fbd4f8a
    Description: OpenAI API key (text for build testing)
  BotApiSecret:
    Type: String
    Default: botsecret_e1b9c2a7c5f24ad6
    Description: Bot HMAC secret (text for build testing)

Globals:
  Function:
    Runtime: nodejs22.x
    MemorySize: 512
    Timeout: 30
    Tracing: Active

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','OPTIONS']
        AllowHeaders: ['*']
      Auth:
        Authorizers:
          AdminCognitoAuth:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"
          BotLambdaAuth:
            FunctionArn: !GetAtt BotAuthFn.Arn
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            Identity:
              Headers:
                - X-Bot-Signature
                - X-Bot-Timestamp

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectName}-${Stage}-admin"
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: admin-ui
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [openid, email, profile]
      CallbackURLs: ["http://localhost:3000"]
      LogoutURLs: ["http://localhost:3000"]
      SupportedIdentityProviders: [COGNITO]

  BotAuthFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-bot-auth"
      CodeUri: ../src
      Handler: handlers/auth/botAuth.handler
      Environment:
        Variables:
          BOT_SECRET: !Ref BotApiSecret

  BotAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BotAuthFn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  AskFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-ask"
      CodeUri: ../src
      Handler: handlers/ask.handler
      Events:
        PostQA:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /qa
            Method: POST
            Auth:
              Authorizer: BotLambdaAuth
      Environment:
        Variables:
          DOCS_TABLE: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableName' }
          SETTINGS_TABLE: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-SettingsTableName' }
          RAW_BUCKET: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableArn' }
                - !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-SettingsTableArn' }
        - S3ReadPolicy:
            BucketName: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }

  IngestionFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-ingestion"
      CodeUri: ../src
      Handler: handlers/ingestion.handler
      Events:
        PostIngest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/ingest
            Method: POST
            Auth:
              Authorizer: AdminCognitoAuth
      Environment:
        Variables:
          DOCS_TABLE: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableName' }
          RAW_BUCKET: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-DocsTableArn' }
        - S3WritePolicy:
            BucketName: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }

  UploadUrlFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-upload-url"
      CodeUri: ../src
      Handler: handlers/uploadUrl.handler
      Events:
        PostUploadUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /docs/upload-url
            Method: POST
            Auth:
              Authorizer: AdminCognitoAuth
      Environment:
        Variables:
          RAW_BUCKET: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }
      Policies:
        - S3WritePolicy:
            BucketName: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-RawBucketName' }

  SettingsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-settings"
      CodeUri: ../src
      Handler: handlers/settings.handler
      Events:
        GetSettings:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /settings
            Method: GET
            Auth:
              Authorizer: AdminCognitoAuth
        PutSettings:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /settings
            Method: PUT
            Auth:
              Authorizer: AdminCognitoAuth
      Environment:
        Variables:
          SETTINGS_TABLE: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-SettingsTableName' }
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !ImportValue { 'Fn::Sub': '${ProjectName}-${Stage}-SettingsTableArn' }

Outputs:
  ApiEndpoint:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
